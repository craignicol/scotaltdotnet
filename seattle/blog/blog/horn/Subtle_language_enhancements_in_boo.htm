In a previous <a target="_blank" href="http://thesoftwaresimpleton.blogspot.com/2009/04/parsing-horn-dsl.html">post</a> , I introduced the concept of the <i>boo compiler pipeline.</i>

The <i>boo compiler pipeline</i> allows boo users to insert their own custom extension points into the pipeline.  In the previous <a target="_blank" href="http://thesoftwaresimpleton.blogspot.com/2009/04/boo-compiler-extension-in-horn-dsl.html">post</a> I explained how the horn software system inserts an anonyomous base class into the pipeline in order to effectively become the base class which all Dsl scripts will inherit from.

I now want to touch on another subtler technique we can achieve using the boo compiler pipeline.  Let us examine some horn Dsl build script code and then explain how we achieved the result.
<div style="font-family: Courier New; color: black; background: white;">
<pre style="margin: 0px;">dependencies:
&nbsp;&nbsp;&nbsp;&nbsp;depend @log4net >> "lib"
&nbsp;&nbsp;&nbsp;&nbsp;depend @castle  >> "castle.core"
&nbsp;&nbsp;&nbsp;&nbsp;depend @castle  >> "Castle.DynamicProxy2"
&nbsp;&nbsp;&nbsp;&nbsp;depend @castle  >> "castle.microKernel"
&nbsp;&nbsp;&nbsp;&nbsp;depend @castle  >> "castle.windsor"</pre>
</div>
This post will explain how we gave a new meaning to the right shift bitwise operator ('>>') above to give arguably a better Dsl syntax.

