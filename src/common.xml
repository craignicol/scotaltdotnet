<?xml version="1.0"?>
<project name="ncontinuity2" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
	<!-- 
		Use this to determine if the key file Continuity2Key.snk should be used to 
		sign the assemblies. Defaults to true since private key is present
		in SVN.
	-->
	<property name="sign" value="false" />
	<property name="key.file" value="${path::get-full-path(root.dir)}/Continuity2Key.snk" />

	<!-- Controls whether tests are run. Setting this is as input to the build disables *all* tests. -->
	<property name="common.run-tests" value="true" readonly="false" overwrite="true"/>
	<property name="common.testrunner.enabled" value="${common.run-tests}" overwrite="true" readonly="false" />
	<property name="common.testrunner.failonerror" value="true" readonly="false" overwrite="true"/>

  <!-- Check which nant version we're using - fail if it's not the minium  -->
  <property name="nant-version.current" value="${assemblyname::get-version(assembly::get-name(nant::get-assembly()))}" />
  <property name="nant-version.required" value="0.85.2478.0" />
  <!-- Nant 0.85 release version -->
  <property name="nant-version.beta1_086" value="0.86.2898.0" />
  <!-- Nant 0.86 Beta 1 -->  
  
	<!-- 
		Path to the folder that contain the external assemblies.  For net-2.0 the values will
		be lib, lib/net, and lib/net/2.0 respectively.
	-->
	<property name="lib.dir" value="../lib" dynamic="true" />
	<property name="lib.family.dir" value="${path::combine(lib.dir, framework::get-family(framework::get-target-framework()))}" dynamic="true" />
	<property name="lib.framework.dir" value="${path::combine(lib.family.dir, version::to-string(framework::get-version(framework::get-target-framework())))}" dynamic="true" />

  <!-- x64 support -->
  <property name="lib.family-x64.dir" value="${path::combine(lib.family.dir, 'x64')}" dynamic="true" />
  <property name="lib.framework-x64.dir" value="${path::combine(lib.framework.dir, 'x64')}" dynamic="true" />
  <property name="lib.framework.clr-x64.dir" value="${path::combine(lib.framework.clr.dir, 'x64')}" dynamic="true" />

  <if test="${not(framework::get-family(framework::get-runtime-framework()) == 'mono')}">
    <property name="registry.dotnet.v3.0.Installed" value="0" overwrite="false"/>

    <readregistry property="registry.dotnet.v3.0.Installed"
			  key="SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.0\Install"
			  hive="LocalMachine"
			  failonerror="false" />

    <readregistry property="registry.dotnet.v3.0.Installed"
			  key="SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.0\Setup\InstallSuccess"
			  hive="LocalMachine"
			  unless="${property::exists('registry.dotnet.v3.0.Installed')}"
			  failonerror="false" />

    <property name="dotnet.v3.0.installed" value="${registry.dotnet.v3.0.Installed == '1'}" />

    <if test="${dotnet.v3.0.installed}">
      <readregistry property="dotnet.v3.0.ReferenceInstallPath"
				  key="SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.0\Setup\Windows Communication Foundation\ReferenceInstallPath"
				  hive="LocalMachine"
				  if="${dotnet.v3.0.installed}" />
    </if>
  </if>

  <!-- 
		Versioning
	-->
	<property name="project.version" 	value="2.0.0.0" />
	<property name="project.major" 		value="${version::get-major(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.minor" 		value="${version::get-minor(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.build"		value="${version::get-build(version::parse(project.version))}" 		dynamic="true" />
	<property name="project.revision"	value="${svn.revision}" dynamic="true" />

	<property name="assembly.major" 	value="${version::get-major(version::parse(assembly.version))}"		dynamic="true" />
	<property name="assembly.minor" 	value="${version::get-minor(version::parse(assembly.version))}" 	dynamic="true" />
	<property name="assembly.build"		value="${version::get-build(version::parse(assembly.version))}" 	dynamic="true" />
	<property name="assembly.revision"	value="${version::get-revision(version::parse(assembly.version))}"	dynamic="true" />

	<property name="svn.revision" value="0" />

	<!-- 
		These are used to set the correct attributes in AssemblyInfo.cs.  
	-->
	<property name="project.company" value="Horn" />

	<!-- debug|release -->
	<property name="build.defines" value="TRACE" />
	<property name="build.defines" value="${build.defines},STRONG" if="${sign}" />

	<!-- platform specific properties. These are the defaults -->
	<property name="current.build.defines" value="${build.defines}" />

	<!-- named project configurations -->
	<target name="set-debug-project-configuration" description="Perform a 'debug' build">
		<property name="build.debug"	value="true" />
		<property name="build.optimize"	value="false" />
	</target>

	<target name="set-release-project-configuration" description="Perform a 'release' build">
		<property name="build.debug"	value="false" />
		<property name="build.optimize" value="true" />
	</target>

	<target name="set-project-configuration">
		<property name="project.config" value="debug" />
		<if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
			<fail message="Unknown configuration: '${project.config}'" />
		</if>
		<property name="build.warnaserrors" value="true" />
		<property name="build.warnmissingdocs" value="false" />
		<call target="set-${project.config}-project-configuration" />

		<property name="src.dir" 			value="${path::get-full-path(project::get-base-directory())}" />
		<property name="build.base.dir"	value="${root.dir}/build" />
		<property name="build.family.dir"	value="${build.base.dir}/${nant.settings.currentframework}" />
		<property name="build.dir" 		value="${path::get-full-path(path::combine(build.family.dir,project.config))}" dynamic="true" />
		<property name="testresults.dir" 	value="${build.dir}/test-results" />
		<property name="releasenotes.dir"	value="${build.dir}/ReleaseNotes" />
		<property name="build.rebuild"		value="false" />
		<property name="build.lib.dir" value="${root.dir}../lib"/>
		<property name="package.dir" value="${src.dir}/Horn.Core/BuildConfigs" />
	</target>

  <target name="set-framework-configuration">
    <if test="${not(target::exists('set-'+framework::get-target-framework()+'-framework-configuration'))}">
      <fail message="The '${framework::get-target-framework()}' framework is not supported by this version of Castle." />
    </if>
    <property name="clr-version" value="${framework::get-clr-version(framework::get-runtime-framework())}" />

    <property name="csc.keyfile" 				value="" />
    <property name="csc.args" 					value="" />
    <property name="common.testrunner.args" 	value="" overwrite="false" />
    <if test="${not(framework::get-family(framework::get-runtime-framework()) == 'mono')}">
      <readregistry property="dotnet.SPlevel"
						  key="SOFTWARE\Microsoft\NET Framework Setup\NDP\v${framework::get-clr-version(framework::get-runtime-framework())}\SP"
						  hive="LocalMachine"
			 />
    </if>
    <property name="dotnet.SPlevel" value="0" if="${framework::get-family(framework::get-runtime-framework()) == 'mono'}" />

    <script language="C#">
      <code>
        <![CDATA[
					public static void ScriptMain(Project project)
					{
						// Detect Process Bitness - http://blogs.msdn.com/david.wang/archive/2006/03/26/HOWTO-Detect-Process-Bitness.aspx
						if( System.Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE") == "x86" && string.IsNullOrEmpty(System.Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432"))) {
							project.Properties["os.x64"] = false.ToString();
						} else {
							project.Properties["os.x64"] = true.ToString();
						}
					}
				]]>
      </code>
    </script>

    <call target="set-${framework::get-target-framework()}-framework-configuration" />

    <property name="build.msbuild" 	value="false" overwrite="false" />
  </target>

	<target name="set-net-2.0-framework-configuration">
		<property name="nant.settings.currentframework" value="net-2.0" />
		<property name="current.build.defines" value="${build.defines},NET,DOTNET2" />
		<property name="link.sdkdoc.version" value="SDK_v2_0" />
		<property name="merge.targetplatform" value="v2" />
		<property name="csc.keyfile" value="/keyfile:${key.file}" />
		<!-- If DevEnvDir exists, we grab it, otherwise we try if the default location (if it exists) -->
		<if test="${environment::variable-exists('DevEnvDir')}">
			<property name="dev.env.dir" value="${environment::get-variable('DevEnvDir')}" />
		</if>
		<if test="${not environment::variable-exists('DevEnvDir')}">
			<property name="default.dev.env.dir" value="%ProgramFiles%\Microsoft Visual Studio 8\Common7\IDE" />
			<if test="${directory::exists(default.dev.env.dir)}">
				<property name="dev.env.dir" value="${default.dev.env.dir}" />
			</if>
		</if>
		<property name="build.msbuild"	value="false" overwrite="true" readonly="false" />
		<property name="project.vsproj" value="${project::get-name()}.csproj" />
	</target>

	<target name="set-net-3.5-framework-configuration">
		<property name="nant.settings.currentframework" value="net-3.5" />
		<property name="current.build.defines" value="${build.defines},NET,DOTNET35" />
		<property name="link.sdkdoc.version" value="SDK_v3_5" />
		<property name="merge.targetplatform" value="v3" />
		<property name="csc.keyfile" value="/keyfile:${key.file}" />
		<property name="build.msbuild"	value="false" overwrite="true" readonly="false" />
		<property name="project.vsproj" value="${project::get-name()}.csproj" />
	</target>

  <target name="display-current-runtime">
    <echo message="" />
    <echo message="----------------------------------------------------------" />
    <echo message=" ${framework::get-description(framework::get-target-framework())}" />
    <echo message="----------------------------------------------------------" />
    <echo message="" />
    <echo message="framework : ${framework::get-target-framework()}" />
    <echo message="description : ${framework::get-description(framework::get-target-framework())}" />
    <echo message="sdk directory : ${framework::get-sdk-directory(framework::get-target-framework())}" />
    <echo message="framework directory : ${framework::get-framework-directory(framework::get-target-framework())}" />
    <echo message="assembly directory : ${framework::get-assembly-directory(framework::get-target-framework())}" />
    <echo message="runtime engine : ${framework::get-runtime-engine(framework::get-target-framework())}" />
    <echo message="extra : .Net 3.0 installed" if="${dotnet.v3.0.installed}" />
    <echo message="" />
  </target>

	<target name="common.init"
		depends="set-framework-configuration set-project-configuration common.check-nant-version"
		description="Initializes build properties">

		<fileset id="project.sources" failonempty="true">
			<include name="${src.dir}/**/*.cs" />
		</fileset>
		<resourcefileset id="project.resources" />
	</target>

  <target name="common.find-svninfo">
    <!-- For adding SVN revision to builds -->
    <property name="svn.revision" value="0" overwrite="false" />
    <!-- try to update the revision -->
    <exec
			program="svn"
			commandline='info "${project::get-base-directory()}" --xml'
			output="_revision.xml"
			failonerror="false"/>
    <if test="${(framework::get-family(framework::get-runtime-framework()) == 'mono')}">
      <!-- Should check unix not mono -->
      <exec
				program="svn"
				commandline='info "${project::get-base-directory()}" --xml > _revision.xml'
				failonerror="false"/>
    </if>
    <xmlpeek
			file="_revision.xml"
			xpath="/info/entry/@revision"
			property="svn.revision"
			failonerror="false"/>
    <delete file="_revision.xml" failonerror="false" />
    <echo message="INFO: Using Subversion revision number: ${svn.revision}"/>
  </target>

  <target name="common.check-nant-version">
    <fail if="${nant-version.current&lt;nant-version.required}" message="Not using minimum required Nant version: ${nant-version.required} (current version: ${nant-version.current}). Please upgrade your copy of nant." />
  </target>

</project>
