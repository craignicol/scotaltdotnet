<?xml version="1.0" encoding='iso-8859-1' ?>
<project
	name="Horn"
	default="build"
	xmlns="http://nant.sf.net/release/0.85/nant.xsd"
>

  <property name="root.dir" value="." />
  <include buildfile="${root.dir}/common.xml" />

  <fileset id="buildfiles.all">
    <include name="Horn.Core/Horn.Core.build" />
    <include name="Horn.Console/Horn.Console.build" />
    <include name="Horn.Spec.Framework/Horn.Spec.Framework.build"/>
  </fileset>

  <fileset id="testfiles.all">
    <include name="Horn.Core.Spec/Horn.Core.Spec.build"/>
  </fileset>

  <target name="build"
			depends="clean init copy-referenced-assemblies copy-package-tree"
			description="Builds Horn to the current configuration." >   
    <nant target="build">
      <buildfiles refid="buildfiles.all"/>
    </nant>
    <if test="${common.testrunner.enabled}">
      <nant target="test">
        <buildfiles refid="testfiles.all"/>
      </nant>
    </if>
  </target>


  <target name="rebuild"
		depends="init recreate-build-directory build"
		description="Rebuilds Horn in the current configuration" />

  <target name="init" depends="common.init">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${testresults.dir}" />

    <call target="common.find-svninfo" />
  </target>

  <target name="clean" description="Deletes current build artifacts" depends="common.init">
    <delete dir="${build.dir}" failonerror="false" />
    <delete>
      <fileset basedir="${build.base.dir}">
        <include name="*.*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-vs" description="Delete Visual Studio artifacts" depends="common.init">
    <echo message="Gathering files for removal..." />
    <foreach item="File" property="filename">
      <in>
        <items basedir=".">
          <include name="**/*.suo" />
          <include name="*/*.csproj.user" />
        </items>
      </in>
      <do>
        <delete file="${filename}" />
      </do>
    </foreach>
    <echo message="Gathering folders for removal..." />
    <foreach item="Folder" property="foldername">
      <in>
        <items basedir=".">
          <include name="**/obj" />
          <include name="**/_ReSharper*" />
        </items>
      </in>
      <do>
        <delete dir="${foldername}" failonerror="false" />
      </do>
    </foreach>
  </target>


  <target name="recreate-build-directory">
    <echo message="Current Directory is ${project::get-base-directory()}" />
    <echo message="Build Directory is ${build.dir}" />

    <!-- Prepare build directory -->
    <delete dir="${build.dir}" failonerror="false" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${testresults.dir}" />
    <call target="copy-referenced-assemblies" />
	  <call target="copy-package-tree" />	
    <property name="build.rebuild" value="true" />
  </target>

  <target name="copy-package-tree">
    <mkdir dir="${build.dir}/BuildConfigs/Horn"/>
    <copy todir="${build.dir}/BuildConfigs/Horn">
      <fileset basedir="${root.dir}/Horn.Core.Spec/BuildConfigs/Horn">
        <includes name="*.boo" />
      </fileset>
    </copy>

  </target>
	
  <target name="copy-referenced-assemblies">
    <!-- Copy framework-neutral libraries -->
    <copy todir="${build.dir}" >
      <fileset basedir="../lib">
        <include name="*.dll" />
        <include name="*.exe" />
        <include name="*.xml" />
        <include name="*.config"/>
        <include name="*.license.txt" />
      </fileset>
    </copy>

    <copy todir="${build.dir}" >
      <fileset basedir="../lib/SharpSvn-x86">
        <include name="*.dll" />
        <include name="*.exe" />
        <include name="*.xml" />
        <include name="*.config"/>
        <include name="*.license.txt" />
      </fileset>
    </copy>

    <copy todir="${build.dir}" >
      <fileset basedir="../lib/Nant">
        <include name="*.dll" />
        <include name="*.exe" />
        <include name="*.xml" />
        <include name="*.config"/>
        <include name="*.license.txt" />
      </fileset>
    </copy>

    <copy todir="${build.dir}" >
      <fileset basedir="../lib/SharpSvn-x86">
        <include name="*.dll" />
        <include name="*.exe" />
        <include name="*.xml" />
        <include name="*.config"/>
        <include name="*.license.txt" />
      </fileset>
    </copy>

    <!-- Copy family-specific libraries installed on the system-->
    <copy file="${path::combine(nant::get-base-directory(), 'NAnt.Core.dll')}" todir="${lib.family.dir}" />

    <!-- Copy family-specific libraries -->
    <!-- 
			The build of log4net works just fine for all versions of .NET.
			When they do get framework specific extensions then we
			can just move them to the framework specific section
		-->
    <copy todir="${build.dir}">
      <fileset basedir="${lib.family.dir}">
        <include name="*.dll" />
        <include name="*.xml" />
        <include name="*.license.txt" />
        <include name="*.exe"/>
        <include name="*.config"/>
        <include name="xunit.console.x86.exe"/>
        <include name="xunit.console.x86.exe.config"/>
        <exclude name="*NGraphviz.*"/>
        <exclude name="QuickGraph.*.dll"/>
        <exclude name="TestDriven.Framework.dll"/>
        <exclude name="MbUnit.Tasks.dll"/>
        <exclude name="MbUnit.AddIn.dll"/>
        <exclude name="MbUnit.AddIn.dll"/>
      </fileset>
    </copy>

    <!-- Copy framework-specific libraries -->
    <copy todir="${build.dir}">
      <fileset basedir="${lib.framework.dir}">
        <include name="*.dll" />
        <include name="*.xml" />
        <include name="*.exe" />
        <include name="*.license.txt" />
      </fileset>
    </copy>
  </target>

  <target name="build-all-frameworks" depends="init">
    <!-- Save the current framework -->
    <property name="current.framework.saved" value="${nant.settings.currentframework}" />

    <!-- Execute build for each framework -->
    <foreach item="String" delim=" " property="framework" in="net-1.1 net-2.0">
      <call target="set-${framework}-framework-configuration" />
      <call target="build" />
    </foreach>

    <!-- Reset the current framework to the saved value -->
    <call target="set-${current.framework.saved}-framework-configuration" />
  </target>

</project>

